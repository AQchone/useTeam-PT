import React from 'react';\nimport { DndContext, DragEndEvent } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\n\nexport type Task = { _id: string; title: string; description: string; column: 'todo' | 'doing' | 'done' };\n\nconst columns: Array<{ key: Task['column']; title: string }> = [\n  { key: 'todo', title: 'To Do' },\n  { key: 'doing', title: 'Doing' },\n  { key: 'done', title: 'Done' },\n];\n\nexport function Kanban({ tasks, onMove }: { tasks: Task[]; onMove: (id: string, column: Task['column']) => void }) {\n  const byCol: Record<Task['column'], Task[]> = { todo: [], doing: [], done: [] };\n  tasks.forEach(t => byCol[t.column].push(t));\n\n  const handleDragEnd = (e: DragEndEvent) => {\n    const id = String(e.active.id);\n    const toCol = e.over?.id as Task['column'] | undefined;\n    if (toCol) onMove(id, toCol);\n  };\n\n  return (\n    <DndContext onDragEnd={handleDragEnd}>\n      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 16 }}>\n        {columns.map(c => (\n          <div key={c.key} id={c.key} style={{ background: '#f7f7f7', padding: 12, borderRadius: 8 }}>\n            <h3>{c.title}</h3>\n            <SortableContext items={byCol[c.key].map(t => t._id)} strategy={verticalListSortingStrategy}>\n              {byCol[c.key].map(t => (\n                <div key={t._id} id={t._id} style={{ background: 'white', padding: 8, marginBottom: 8, borderRadius: 6, boxShadow: '0 1px 2px rgba(0,0,0,0.1)' }}>\n                  <strong>{t.title}</strong>\n                  <div style={{ fontSize: 12, color: '#666' }}>{t.description}</div>\n                </div>\n              ))}\n            </SortableContext>\n          </div>\n        ))}\n      </div>\n    </DndContext>\n  );\n}\n
